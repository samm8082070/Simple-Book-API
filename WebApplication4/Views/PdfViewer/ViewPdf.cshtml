@{
    ViewData["Title"] = "The Bookshelf";
    var bookId = ViewBag.BookId;
}
<div id="pdf-container" data-book-id="@bookId">
</div>


<head>
    <style>
        #page_num {
            cursor: pointer;
            text-decoration: underline;
            color: #5865F2;
            padding: 2px 4px;
            border-radius: 3px;
        }

        #page_num:hover {
                background-color: #003366;
        }

        #the-canvas {
            margin-top: 20px; /* Add space between buttons and canvas */
            max-width: 90%; /* ensure that the canvas does not become too wide. */
            height: auto; /* Preserve aspect ratio */
        }

        #fullScreenButton img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        #fullScreenButton span {
            max-width: 24px;
            max-height: 24px;
            display: inline-block;
        }
        #zoomOutButton img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        #zoomOutButton span {
            max-width: 24px;
            max-height: 24px;
            display: inline-block;
        }
        #zoomInButton img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        #zoomInButton span {
            max-width: 24px;
            max-height: 24px;
            display: inline-block;
        }

        #canvas-container {
            width: 100%; /* Ensure canvas container fills available width */
            display: flex; /* use flexbox to center the canvas */
            justify-content: center; /* center the canvas */
        }

        .pdf-and-summary-container {
            display: flex;
        }

        #summary-container {
            width: 700px; /* Adjust width as needed */
            height: auto;
            padding: 15px;
            border-left: 1px solid #3E3E40;
        }

        .usage-warning {
            font-size: 0.8em;
            color: orange;
        }
    </style>
</head>

<script src="~/pdfjs/build/pdf.mjs" type="module"></script>

<script type="module">

    async function yieldToMainThread() {
    return new Promise(resolve => {
        setTimeout(resolve, 0);
        });
    }
    // If absolute URL from the remote server is provided, configure the CORS
    // header on that server.
    var container = document.getElementById('pdf-container');
    var pdfId = container.dataset.bookId;
    var url = '/api/PdfApi/GetPdf/' + pdfId;

    // Loaded via <script> tag, create shortcut to access PDF.js exports.
    var { pdfjsLib } = globalThis;

    // The workerSrc property shall be specified.
    pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdfjs/build/pdf.worker.mjs';

    const maxScale = 2.0;
    const minScale = 0.5;
    const zoomIncrement = 0.1;

    var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null,
        originalscale = 0.8,
        currentScale = 0.8,
        canvas = document.getElementById('the-canvas'),
        ctx = canvas.getContext('2d'),
        isFullScreen = false;

    /**
     * Get page info from document, resize canvas accordingly, and render page.
     * param num Page number.
     */
    async function renderPage(num,scale=0.8) {

        await pdfDoc.getPage(num).then(async function(page) {
            currentScale = scale;
            var viewport = page.getViewport({ scale: scale });
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            var renderContext = {
                canvasContext: ctx,
                viewport: viewport,
            };
            var renderTask = page.render(renderContext);

            await renderTask.promise.then(async function() {
                pageRendering = false;
                if (pageNumPending !== null) {
                    await renderPage(pageNumPending);
                    pageNumPending = null;
                }
                await yieldToMainThread();
            });
            await yieldToMainThread();
        });

        document.getElementById('page_num').textContent = num;
    }

    /**
     * If another page rendering in progress, waits until the rendering is
     * finised. Otherwise, executes rendering immediately.
     */
    function queueRenderPage(num,scale) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num ,scale);
      }
    }

    /**
     * Displays previous page.
     */
    function onPrevPage() {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      if(isFullScreen){
          queueRenderPage(pageNum,1.5);
      }else{
        queueRenderPage(pageNum);
      }
    }
    document.getElementById('prev').addEventListener('click', onPrevPage);

    /**
     * Displays next page.
     */
    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      if(isFullScreen){
          queueRenderPage(pageNum,1.5);
      }else{
        queueRenderPage(pageNum);
      }
      
    }
    document.getElementById('next').addEventListener('click', onNextPage);
    

    function zoomOut() {
      if (currentScale > minScale) {
        currentScale -= zoomIncrement;
        renderPage(pageNum, currentScale);
      } else {
        console.log("Minimum zoom level reached.");
        
      }
    }
    document.getElementById('zoomOutButton').addEventListener('click', zoomOut);

    function zoomIn() {
      if (currentScale < maxScale) {
        currentScale += zoomIncrement;
        renderPage(pageNum, currentScale);
      } else {
        console.log("Maximum zoom level reached.");
        
      }
    }
    document.getElementById('zoomInButton').addEventListener('click', zoomIn);
    /**
     * Asynchronously downloads PDF.
     */
    pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
      pdfDoc = pdfDoc_;
      document.getElementById('page_count').textContent = pdfDoc.numPages;

      // Initial/first page rendering
      renderPage(pageNum);
    });

    const pageNumSpan = document.getElementById('page_num');

    pageNumSpan.addEventListener('click', () => {
        // Create a text box
        const input = document.createElement('input');
        input.type = 'number';
        input.value = pageNum; // Current page number
        input.style.width = '50px'; // Adjust width as needed

        // Replace the span with the input
        pageNumSpan.replaceWith(input);
        input.focus();

        // Handle input changes
        input.addEventListener('change', () => {
            const newPageNum = parseInt(input.value);
            if (newPageNum >= 1 && newPageNum <= pdfDoc.numPages) {
                pageNum = newPageNum;
                queueRenderPage(pageNum);
            }
            // Replace the input back with the span
            input.replaceWith(pageNumSpan);
            pageNumSpan.textContent = pageNum;
        });

        // Handle losing focus.
        input.addEventListener('blur', () => {
            input.replaceWith(pageNumSpan);
            pageNumSpan.textContent = pageNum;
        });
    });

    const canvasContainer = document.getElementById('canvas-container');
    const fullScreenButton = document.getElementById('fullScreenButton');

    fullScreenButton.addEventListener('click', () => {
        if (!document.fullscreenElement) {
            canvasContainer.requestFullscreen();
            isFullScreen = true;

            // Create fullscreen controls
            const fullscreenControls = document.createElement('div');
            fullscreenControls.id = 'fullscreen-pdf-controls';
            fullscreenControls.style.position = 'fixed';
            fullscreenControls.style.top = '0';
            fullscreenControls.style.left = '0';
            fullscreenControls.style.width = '100%';
            fullscreenControls.style.zIndex = '9999';
            fullscreenControls.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
            fullscreenControls.style.padding = '10px';
            fullscreenControls.style.display = 'flex';
            fullscreenControls.style.justifyContent = 'center';
            fullscreenControls.style.gap = '20px';

            const prevButtonFS = document.createElement('button');
            prevButtonFS.textContent = 'Previous';
            prevButtonFS.addEventListener('click', onPrevPage); // Reuse your existing function

            const nextButtonFS = document.createElement('button');
            nextButtonFS.textContent = 'Next';
            nextButtonFS.addEventListener('click', onNextPage); // Reuse your existing function

            const exitButtonFS = document.createElement('button');
            exitButtonFS.textContent = 'Exit Fullscreen';
            exitButtonFS.addEventListener('click', () => {
                document.exitFullscreen();
            });

            fullscreenControls.appendChild(prevButtonFS);
            fullscreenControls.appendChild(nextButtonFS);
            fullscreenControls.appendChild(exitButtonFS);

            canvasContainer.appendChild(fullscreenControls);

            // Optionally hide original controls
            const originalControls = document.querySelector('.pdf-viewer-container > div');
            if (originalControls) {
                originalControls.style.display = 'none';
            }

            renderPage(pageNum, 1.5);
        } else {
            document.exitFullscreen();
            isFullScreen = false;

            // Remove fullscreen controls
            const fullscreenControls = document.getElementById('fullscreen-pdf-controls');
            if (fullscreenControls) {
                fullscreenControls.remove();
            }

            // Optionally show original controls
            const originalControls = document.querySelector('.pdf-viewer-container > div');
            if (originalControls) {
                originalControls.style.display = '';
            }

            renderPage(pageNum, originalscale);
        }
    });

    document.addEventListener('fullscreenchange', () => {
        if (!document.fullscreenElement) {
            isFullScreen = false;
            const fullscreenControls = document.getElementById('fullscreen-pdf-controls');
            if (fullscreenControls) {
                fullscreenControls.remove();
            }
            const originalControls = document.querySelector('.pdf-viewer-container > div');
            if (originalControls) {
                originalControls.style.display = '';
            }
            renderPage(pageNum, originalscale);
        }
    });

        // 1. Get references to the necessary elements
    const generateSummaryButton = document.getElementById('generateSummaryButton');
    const summaryContentDiv = document.getElementById('summary-content');

    // 2. Define the summarize function
    function summarize() {
        const api = `/api/PdfApi/GetSummary/${pdfId}`; // Your API endpoint

        // 2.1. Disable the button to prevent multiple clicks
        generateSummaryButton.disabled = true;
        generateSummaryButton.textContent = "Summarizing..."; // Change button text

        // 2.2. Show a loading animation (replace with your actual animation)
        summaryContentDiv.innerHTML = '<div id="loading-animation-container" class="loadingio-spinner-rolling-nq4q5u6dq7r"><div class="ldio-x2uulkbinbj"><div></div></div></div>';

        // 2.3. Make the API call using fetch (or your preferred AJAX method)
        fetch(api, {
            method: 'GET'
        })
        .then(response => {
            if (!response.ok) {
                // Try to get the error message from the response body
                return response.text().then(errorMessage => {
                    throw new Error(`HTTP error! Status: ${response.status}, Message: ${errorMessage}`);
                }).catch(() => {
                    // If getting the text fails (e.g., non-text response), still throw with status
                    throw new Error(`HTTP error! Status: ${response.status}`);
                });
            }
            return response.text(); // Or response.json() if your API returns JSON
        })
        .then(summary => {
            // 2.4. Display the summary in the summaryContentDiv
            summaryContentDiv.innerHTML = summary;
            const loadingAnimation = document.getElementById('loading-animation-container');
            if (loadingAnimation) {
                loadingAnimation.remove(); // Modern way to remove the element
            }
        })
        .catch(error => {
            // 2.5. Handle errors gracefully
            console.error("Error fetching summary:", error);
            summaryContentDiv.innerHTML = '<p class="error-message">Failed to generate summary. Please try again.</p>';
            setTimeout(() => {
                const loadingAnimation = document.getElementById('loading-animation-container');
                if (loadingAnimation) {
                    loadingAnimation.remove();
                }
            }, 2000);
        })
        .finally(() => {
            // 2.6. Re-enable the button and restore its text
            generateSummaryButton.disabled = false;
            generateSummaryButton.textContent = "Generate";
        });
    }

    // 3. Attach the event listener to the button
    generateSummaryButton.addEventListener('click', summarize);
</script>


<div class="pdf-viewer-container">
    <div>
        <span>
            <a asp-controller="WebBooks" asp-action="Index" class="search-button">Back To Index</a>
        </span>
        <button id="fullScreenButton" class="search-button">
            <span><img src="~/images/icons/expand-solid.svg" alt="Toggle Full Screen" /></span>
        </button>
        <button id="zoomOutButton" class="search-button">
            <span><img src="~/images/icons/magnifying-glass-minus-solid.svg" alt="Zoom Out" /></span>
        </button>
        <button id="zoomInButton" class="search-button">
            <span><img src="~/images/icons/magnifying-glass-plus-solid.svg" alt="Zoom In" /></span>
        </button>
        <button id="prev" class="search-button">Previous</button>
        <button id="next" class="search-button">Next</button>
        &nbsp; &nbsp;
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    </div>

    
    <div class="pdf-and-summary-container">
        <div id="canvas-container">
            <canvas id="the-canvas"></canvas>
        </div>
        <div id="summary-container">
            <h3>AI-Powered Summary (Beta)</h3>
			<p class="usage-warning">This feature uses a free AI service with usage limitations.</p>
            <div class="pdf-controls">
				<button id="generateSummaryButton" class="search-button">Generate</button>
			</div>
            <div id="summary-content">
            </div>
        </div>
    </div>
</div>